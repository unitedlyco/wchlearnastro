---
// Blog Post Page
// ------------
// Description: The blog post page.

// Components
// - Layout
import Layout from '../../layouts/PostLayout.astro'

// WordPress GraphQL Client
import WordPressGraphQLClient from '../../lib/wordpress.js'

// Define types for WordPress post data
interface WordPressPost {
	slug: string;
	title: string;
	excerpt: string;
	date: string;
	content: string;
	featuredImage?: {
		node?: {
			sourceUrl?: string;
		};
	};
	author?: {
		node?: {
			name?: string;
		};
	};
	categories?: {
		nodes?: Array<{
			name: string;
		}>;
	};
}

// Enable prerendering for static builds
export const prerender = true;

// Get all posts for static paths
export async function getStaticPaths() {
	try {
		const client = new WordPressGraphQLClient();
		const response = await client.getAllPosts(100); // Adjust number as needed
		const posts = response.posts.nodes;

		return posts.map((post: WordPressPost) => ({
			params: { id: post.slug },
			props: { slug: post.slug }
		}));
	} catch (error) {
		console.error('Error fetching posts for static paths:', error);
		// Return an empty array if fetching fails
		// This will prevent the build from failing completely
		return [];
	}
}

const { slug } = Astro.props;
let post;
let error = false;

try {
	// Fetch the full post data
	const client = new WordPressGraphQLClient();
	const response = await client.getPostBySlug(slug);
	post = response.post;
} catch (e) {
	console.error(`Error fetching post with slug "${slug}":`, e);
	error = true;
}

// Format the data to match your existing structure
const frontmatter = error ? {
	id: slug,
	title: 'Post Not Available',
	description: 'We apologize, but this post could not be loaded at this time.',
	pubDate: new Date(),
	image: '/placeholder-image.jpg',
	author: 'WCH Team',
	tags: []
} : {
	id: post.slug,
	title: post.title,
	description: post.excerpt.replace(/<\/?[^>]+(>|$)/g, ""), // Strip HTML
	pubDate: new Date(post.date),
	image: post.featuredImage?.node?.sourceUrl || '/placeholder-image.jpg',
	author: post.author?.node?.name || 'WCH Team',
	tags: post.categories?.nodes?.map((cat: { name: string }) => cat.name) || []
};

// The post content
const content = error ? '<p>We apologize, but the content of this post could not be loaded at this time. Please try again later.</p>' : post.content;
---

<Layout frontmatter={frontmatter}>
	{error ? (
		<div class="error-container">
			<h2>Content Temporarily Unavailable</h2>
			<p>We're having trouble connecting to our content server. Please try again later.</p>
			<a href="/blog" class="btn btn-primary mt-4">Return to Blog</a>
		</div>
	) : (
		<div class="wp-content" set:html={content}></div>
	)}
</Layout>

<style>
	.wp-content {
		@apply max-w-none overflow-hidden;
	}
	/* Add additional styles to properly format WordPress content */
	.wp-content :global(img) {
		@apply my-6 max-w-full rounded-lg;
	}
	.wp-content :global(h2) {
		@apply mt-8 mb-4 text-2xl font-bold;
	}
	.wp-content :global(h3) {
		@apply mt-6 mb-3 text-xl font-bold;
	}
	.wp-content :global(p) {
		@apply mb-4;
	}
	.wp-content :global(ul) {
		@apply mb-4 ml-6 list-disc;
	}
	.wp-content :global(ol) {
		@apply mb-4 ml-6 list-decimal;
	}
	.wp-content :global(blockquote) {
		@apply my-6 border-l-4 border-primary-500 pl-4 italic;
	}
	/* Handle potential overflow issues */
	.wp-content :global(pre), 
	.wp-content :global(code),
	.wp-content :global(table) {
		@apply max-w-full overflow-x-auto;
	}
	/* Ensure all elements respect container width */
	.wp-content :global(*) {
		@apply max-w-full;
	}
	/* Fix for iframes and embeds */
	.wp-content :global(iframe),
	.wp-content :global(embed) {
		@apply max-w-full;
	}
	
	.error-container {
		@apply p-8 text-center rounded-lg bg-gray-50 my-8;
	}
	.error-container h2 {
		@apply text-2xl font-bold mb-4;
	}
	.error-container p {
		@apply mb-4 text-gray-600;
	}
	.btn {
		@apply inline-block px-6 py-2 rounded-md font-medium;
	}
	.btn-primary {
		@apply bg-blue-600 text-white hover:bg-blue-700;
	}
</style>

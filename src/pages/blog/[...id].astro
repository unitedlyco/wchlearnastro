---
// Blog Post Page
// ------------
// Description: The blog post page.

// Components
// - Layout
import Layout from '../../layouts/PostLayout.astro'

// WordPress GraphQL Client
import WordPressGraphQLClient from '../../lib/wordpress.js'

// Types
interface WordPressPost {
	slug: string;
	title: string;
	excerpt: string;
	date: string;
	content: string;
	featuredImage?: {
		node?: {
			sourceUrl?: string;
		};
	};
	author?: {
		node?: {
			name?: string;
		};
	};
	categories?: {
		nodes?: Array<{
			name: string;
		}>;
	};
}

interface Props {
	post?: WordPressPost;
	title?: string;
	description?: string;
	image?: string;
}

// Enable prerendering for static builds
export const prerender = true;

// Get all posts for static paths
export async function getStaticPaths() {
	try {
		const client = new WordPressGraphQLClient();
		const response = await client.getAllPosts(100); // Adjust number as needed
		const posts = response.posts.nodes;

		return posts.map((post: WordPressPost) => ({
			params: { id: post.slug },
			props: { 
				post,
				title: post.title || 'Post Not Available',
				description: post.excerpt || 'We apologize, but this post could not be loaded at this time.',
				image: post.featuredImage?.node?.sourceUrl || '/placeholder-image.jpg'
			}
		}));
	} catch (error) {
		console.error('Error fetching posts for static paths:', error);
		return [];
	}
}

// Get post from props with fallback values
const { post, title: fallbackTitle, description: fallbackDescription, image: fallbackImage } = Astro.props as Props;

// Format the data with fallbacks
const frontmatter = {
	id: post?.slug || 'not-found',
	title: post?.title || fallbackTitle || 'Post Not Available',
	description: post?.excerpt || fallbackDescription || 'We apologize, but this post could not be loaded at this time.',
	pubDate: new Date(post?.date || Date.now()),
	image: post?.featuredImage?.node?.sourceUrl || fallbackImage || '/placeholder-image.jpg',
	author: post?.author?.node?.name || 'WCH Team',
	tags: post?.categories?.nodes?.map((cat: { name: string }) => cat.name) || []
};

// The post content with fallback
const content = post?.content || '<p>We apologize, but the content of this post could not be loaded at this time. Please try again later.</p>';
---

<Layout title={frontmatter.title} description={frontmatter.description}>
	<article class="max-w-4xl mx-auto px-4 py-8">
		<header class="mb-8">
			<h1 
				class="text-4xl font-bold text-gray-900 dark:text-white mb-4"
				transition:name={`title-${frontmatter.id}`}
			>
				{frontmatter.title}
			</h1>
			<div class="flex items-center gap-4 text-gray-600 dark:text-gray-400">
				<time datetime={frontmatter.pubDate.toISOString()}>
					{frontmatter.pubDate.toLocaleDateString('en-US', {
						year: 'numeric',
						month: 'long',
						day: 'numeric'
					})}
				</time>
				<span>â€¢</span>
				<span>{frontmatter.author}</span>
			</div>
		</header>

		{frontmatter.image && (
			<div class="mb-8 aspect-video overflow-hidden rounded-xl">
				<img
					src={frontmatter.image}
					alt={frontmatter.title}
					class="w-full h-full object-cover"
					loading="lazy"
					decoding="async"
					transition:name={`image-${frontmatter.id}`}
				/>
			</div>
		)}

		<div 
			class="prose dark:prose-invert mx-auto"
			set:html={content}
		/>

		{frontmatter.tags && frontmatter.tags.length > 0 && (
			<div class="mt-8 pt-8 border-t border-gray-200 dark:border-gray-800">
				<h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Topics</h2>
				<div class="flex flex-wrap gap-2">
					{frontmatter.tags.map((tag: string) => (
						<span class="px-3 py-1 text-sm bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full">
							{tag}
						</span>
					))}
				</div>
			</div>
		)}
	</article>
</Layout>

<style>
	/* Add smooth transitions for images */
	img {
		transition: transform 0.3s ease-in-out;
	}
	
	/* Optional: Add hover effect */
	img:hover {
		transform: scale(1.02);
	}
	
	/* Ensure proper spacing in prose content */
	:global(.prose) {
		max-width: 65ch;
	}
	
	:global(.prose img) {
		border-radius: 0.5rem;
		margin: 2rem auto;
	}
	
	:global(.prose a) {
		color: var(--color-primary-600);
		text-decoration: none;
	}
	
	:global(.prose a:hover) {
		text-decoration: underline;
	}
</style>

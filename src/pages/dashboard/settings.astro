---
// Settings Page
// ------------
// Description: A page for users to manage their account settings.

// Force server-side rendering
export const prerender = false;

// Components
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Button from '../../components/ui/Button.astro';
import { Icon } from 'astro-icon/components';
import Toast from '../../components/ui/Toast.astro';

// Helper function for server-side logging
function logToTerminal(message: string, data?: any) {
  const timestamp = new Date().toISOString();
  console.log('\x1b[34m%s\x1b[0m', `[${timestamp}] ⚙️ Settings: ${message}`);
  if (data) {
    console.log('\x1b[33m%s\x1b[0m', JSON.stringify(data, null, 2));
  }
}

// Get user from locals (set by middleware)
const { user, session, displayName } = Astro.locals;

// Log authentication state
logToTerminal('Authentication state', {
  hasUser: !!user,
  hasSession: !!session,
  userId: user?.id,
  email: user?.email,
  displayName
});

// Redirect if not authenticated (backup to middleware)
if (!user || !session?.access_token) {
  logToTerminal('No authenticated user, redirecting to signin');
  return Astro.redirect('/signin');
}

// Page Metadata
const title = 'Settings | Learn';
const description = 'Manage your account settings and preferences.';
---

<DashboardLayout title={title} description={description} activeMenuItem="settings">
  <div class="space-y-4">
    <div class="flex items-center justify-between">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Settings</h1>
    </div>

    <!-- Font Size Settings -->
    <div class="bg-gray-50 dark:bg-gray-700/50 p-6 rounded-xl border border-gray-200 dark:border-gray-700">
      <h2 class="text-base font-semibold text-gray-900 dark:text-white mb-2">Appearance</h2>
      
      <div class="space-y-3">
        <div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <div>
            <h3 class="text-sm font-medium text-gray-900 dark:text-white mb-0.5">Font Size</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Adjust the text size for better readability</p>
          </div>
          <div class="flex items-center gap-2">
            <button id="decrease-font" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
              <Icon name="mdi:minus" class="w-4 h-4" />
            </button>
            <span id="font-size-value" class="text-sm font-medium text-gray-700 dark:text-gray-300 w-8 text-center">100%</span>
            <button id="increase-font" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300">
              <Icon name="mdi:plus" class="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Notification Settings -->
    <div class="bg-gray-50 dark:bg-gray-700/50 p-6 rounded-xl border border-gray-200 dark:border-gray-700">
      <h2 class="text-base font-semibold text-gray-900 dark:text-white mb-2">Notifications</h2>
      
      <div class="space-y-3">
        <div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <div>
            <h3 class="text-sm font-medium text-gray-900 dark:text-white mb-0.5">Email Notifications</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Receive course updates and announcements</p>
          </div>
          <div class="relative inline-block w-12 h-6 transition duration-200 ease-in-out rounded-full cursor-pointer">
            <input 
              type="checkbox" 
              id="email-notifications-toggle" 
              class="absolute w-6 h-6 opacity-0 cursor-pointer"
              checked
            />
            <label 
              for="email-notifications-toggle" 
              class="block h-6 overflow-hidden rounded-full bg-primary-500 dark:bg-primary-600 cursor-pointer"
            >
              <span 
                class="absolute block w-6 h-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in-out translate-x-6"
              ></span>
            </label>
          </div>
        </div>
        
        <div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <div>
            <h3 class="text-sm font-medium text-gray-900 dark:text-white mb-0.5">Browser Notifications</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Get notified in your browser</p>
          </div>
          <div class="relative inline-block w-12 h-6 transition duration-200 ease-in-out rounded-full cursor-pointer">
            <input 
              type="checkbox" 
              id="browser-notifications-toggle" 
              class="absolute w-6 h-6 opacity-0 cursor-pointer"
            />
            <label 
              for="browser-notifications-toggle" 
              class="block h-6 overflow-hidden rounded-full bg-gray-300 dark:bg-gray-600 cursor-pointer"
            >
              <span 
                class="absolute block w-6 h-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in-out"
              ></span>
            </label>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Privacy Settings -->
    <div class="bg-gray-50 dark:bg-gray-700/50 p-6 rounded-xl border border-gray-200 dark:border-gray-700">
      <h2 class="text-base font-semibold text-gray-900 dark:text-white mb-2">Privacy</h2>
      
      <div class="space-y-3">
        <div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <div>
            <h3 class="text-sm font-medium text-gray-900 dark:text-white mb-0.5">Data Collection</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Allow us to collect usage data to improve your experience</p>
          </div>
          <div class="relative inline-block w-12 h-6 transition duration-200 ease-in-out rounded-full cursor-pointer">
            <input 
              type="checkbox" 
              id="data-collection-toggle" 
              class="absolute w-6 h-6 opacity-0 cursor-pointer"
              checked
            />
            <label 
              for="data-collection-toggle" 
              class="block h-6 overflow-hidden rounded-full bg-primary-500 dark:bg-primary-600 cursor-pointer"
            >
              <span 
                class="absolute block w-6 h-6 rounded-full bg-white shadow transform transition-transform duration-200 ease-in-out translate-x-6"
              ></span>
            </label>
          </div>
        </div>
        
        <div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <div>
            <h3 class="text-sm font-medium text-gray-900 dark:text-white mb-0.5">Cookie Preferences</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Manage your cookie settings</p>
          </div>
          <Button style="secondary" size="sm" id="cookie-preferences-btn">
            Manage
          </Button>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast for notifications -->
  <Toast id="settings-toast" />
</DashboardLayout>

<script>
  // Get all toggle inputs
  const emailNotificationsToggle = document.getElementById('email-notifications-toggle') as HTMLInputElement;
  const browserNotificationsToggle = document.getElementById('browser-notifications-toggle') as HTMLInputElement;
  const dataCollectionToggle = document.getElementById('data-collection-toggle') as HTMLInputElement;
  
  // Initialize toggle states from localStorage
  function initializeToggles() {
    // Email notifications
    const emailNotifs = localStorage.getItem('emailNotifications');
    if (emailNotifs !== null) {
      emailNotificationsToggle.checked = emailNotifs === 'true';
    }
    
    // Browser notifications
    const browserNotifs = localStorage.getItem('browserNotifications');
    if (browserNotifs !== null) {
      browserNotificationsToggle.checked = browserNotifs === 'true';
    }
    
    // Data collection
    const dataCollection = localStorage.getItem('dataCollection');
    if (dataCollection !== null) {
      dataCollectionToggle.checked = dataCollection === 'true';
    }
  }

  // Handle email notifications toggle
  emailNotificationsToggle?.addEventListener('change', () => {
    localStorage.setItem('emailNotifications', emailNotificationsToggle.checked.toString());
    showSettingsToast('Email notification preferences updated');
  });

  // Handle browser notifications toggle
  browserNotificationsToggle?.addEventListener('change', async () => {
    if (browserNotificationsToggle.checked) {
      try {
        const permission = await Notification.requestPermission();
        if (permission === 'granted') {
          localStorage.setItem('browserNotifications', 'true');
          showSettingsToast('Browser notifications enabled');
        } else {
          browserNotificationsToggle.checked = false;
          localStorage.setItem('browserNotifications', 'false');
          showSettingsToast('Browser notifications permission denied', 'error');
        }
      } catch (error) {
        browserNotificationsToggle.checked = false;
        localStorage.setItem('browserNotifications', 'false');
        showSettingsToast('Failed to enable browser notifications', 'error');
      }
    } else {
      localStorage.setItem('browserNotifications', 'false');
      showSettingsToast('Browser notifications disabled');
    }
  });

  // Handle data collection toggle
  dataCollectionToggle?.addEventListener('change', () => {
    localStorage.setItem('dataCollection', dataCollectionToggle.checked.toString());
    showSettingsToast('Data collection preferences updated');
  });

  // Helper function to show toast notifications
  function showSettingsToast(message: string, type: 'success' | 'error' = 'success') {
    const settingsToast = document.getElementById('settings-toast');
    if (settingsToast) {
      window.showToast?.({
        type,
        title: 'Settings Updated',
        message,
        duration: 3000
      });
    }
  }

  // Initialize toggles when the page loads
  document.addEventListener('DOMContentLoaded', initializeToggles);
  document.addEventListener('astro:page-load', initializeToggles);
</script> 
---
// Dashboard Page
// ------------
// Description: The main dashboard page for authenticated users.

// Force server-side rendering
export const prerender = false;

// Components
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Button from '../../components/ui/Button.astro';
import { Icon } from 'astro-icon/components';
import Toast from '../../components/ui/Toast.astro';
import StatsCard from '../../components/dashboard/StatsCard.jsx';
import RecentActivity from '../../components/dashboard/RecentActivity.jsx';
import UpcomingSessions from '../../components/dashboard/UpcomingSessions.jsx';

// Helper function for server-side logging
function logToTerminal(message: string, data?: any) {
  const timestamp = new Date().toISOString();
  console.log('\x1b[34m%s\x1b[0m', `[${timestamp}] ðŸ“Š Dashboard: ${message}`);
  if (data) {
    console.log('\x1b[33m%s\x1b[0m', JSON.stringify(data, null, 2));
  }
}

// Get user from locals (set by middleware)
const { user, session, displayName } = Astro.locals;

// Log authentication state
logToTerminal('Authentication state', {
  hasUser: !!user,
  hasSession: !!session,
  userId: user?.id,
  email: user?.email,
  displayName,
  cookieHeader: Astro.request.headers.get('cookie') ? true : false
});

// Redirect if not authenticated (backup to middleware)
if (!user || !session?.access_token) {
  logToTerminal('No authenticated user, redirecting to signin');
  return Astro.redirect('/signin');
}

logToTerminal('User authenticated, rendering dashboard', {
  userId: user.id,
  email: user.email,
  displayName
});

// Page Metadata
const title = 'Dashboard | Learn';
const description = 'Your personal dashboard to manage your learning journey.';
---

<DashboardLayout title={title} activeMenuItem="dashboard">
  <div class="space-y-8">
    <div class="flex items-center justify-between">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Dashboard</h1>
      <div class="flex items-center gap-2">
        <Button style="primary" size="sm" id="refresh-btn">
          <Icon name="mdi:refresh" class="w-4 h-4 mr-1" />
          Refresh
        </Button>
      </div>
    </div>

    <!-- Dashboard content -->
    <div class="grid grid-cols-1 gap-8">
      <!-- Top row -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <!-- Stats Card - Interactive Island -->
        <StatsCard client:load userId={user.id} />

        <!-- Upcoming Sessions - Interactive Island -->
        <UpcomingSessions client:visible userId={user.id} />
      </div>

      <!-- Recent Activity - Interactive Island -->
      <RecentActivity client:visible userId={user.id} />
    </div>
  </div>

  <!-- Toast notification for successful login -->
  <Toast id="login-success" />
</DashboardLayout>

<script>
  // Minimal client-side JavaScript for the refresh button
  document.getElementById('refresh-btn')?.addEventListener('click', () => {
    window.location.reload();
  });
</script>

<script>
  // Handle logout
  const logoutButton = document.getElementById('logout-button');
  
  if (logoutButton) {
    const logoutButtonElement = logoutButton.querySelector('button');
    logoutButtonElement?.addEventListener('click', async () => {
      try {
        console.log('Signing out...');
        
        // Show signout toast
        if (typeof window.showToast === 'function') {
          window.showToast({
            type: 'info',
            message: 'Signing you out...',
            title: 'Sign Out',
            duration: 2000
          });
        }
        
        // Clear client-side storage first
        localStorage.removeItem('sb-access-token');
        localStorage.removeItem('sb-refresh-token');
        
        // Clear cookies
        document.cookie = 'sb-access-token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';
        document.cookie = 'sb-refresh-token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';
        
        // Dispatch auth state change event
        window.dispatchEvent(new CustomEvent('auth-state-change'));
        
        // Use the API endpoint for sign-out
        const response = await fetch('/api/auth/signout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          const data = await response.json();
          console.error('Error signing out:', data.error);
          if (typeof window.showToast === 'function') {
            window.showToast({
              type: 'error',
              message: data.error,
              title: 'Error Signing Out'
            });
          }
          return;
        }
        
        // Short delay to allow the toast to be seen
        setTimeout(() => {
          // Force redirect to home page
          window.location.href = '/';
        }, 1000);
      } catch (error) {
        console.error('Unexpected error:', error);
        if (typeof window.showToast === 'function') {
          window.showToast({
            type: 'error',
            message: 'An unexpected error occurred. Please try again.',
            title: 'Error'
          });
        }
        
        // Fallback redirect
        setTimeout(() => {
          window.location.href = '/';
        }, 2000);
      }
    });
  }
</script> 
---
// Profile Page
// ------------
// Description: A page for users to view and update their profile information.

// Force server-side rendering
export const prerender = false;

// Components
import DashboardLayout from '../../layouts/DashboardLayout.astro';
import Button from '../../components/ui/Button.astro';
import { Icon } from 'astro-icon/components';
import Form from '../../components/ui/forms/Form.astro';
import FormField from '../../components/ui/forms/partials/FormField.astro';
import InputField from '../../components/ui/forms/form-elements/InputField.astro';
import Toast from '../../components/ui/Toast.astro';

// Helper function for server-side logging
function logToTerminal(message: string, data?: any) {
  const timestamp = new Date().toISOString();
  console.log('\x1b[34m%s\x1b[0m', `[${timestamp}] ðŸ‘¤ Profile: ${message}`);
  if (data) {
    console.log('\x1b[33m%s\x1b[0m', JSON.stringify(data, null, 2));
  }
}

// Get user from locals (set by middleware)
const { user, session, displayName } = Astro.locals;

// Log authentication state
logToTerminal('Authentication state', {
  hasUser: !!user,
  hasSession: !!session,
  userId: user?.id,
  email: user?.email,
  displayName,
  metadata: user?.user_metadata
});

// Redirect if not authenticated (backup to middleware)
if (!user || !session?.access_token) {
  logToTerminal('No authenticated user, redirecting to signin');
  return Astro.redirect('/signin');
}

// Get profile photo URL from user metadata or use default
const profilePhotoUrl = user?.user_metadata?.avatar_url || null;

// Page Metadata
const title = 'Profile | Learn';
const description = 'View and update your profile information.';
---

<DashboardLayout title={title} description={description} activeMenuItem="profile">
  <div class="space-y-5">
    <div class="flex items-center justify-between">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Your Profile</h1>
    </div>

    <!-- Profile content -->
    <div class="bg-gray-50 dark:bg-gray-700/50 p-5 rounded-xl border border-gray-200 dark:border-gray-700">
      <div class="flex flex-col md:flex-row gap-6">
        <!-- Profile Photo Section -->
        <div class="flex flex-col items-center space-y-3">
          <div class="relative group">
            <div id="profile-photo-container" class="w-24 h-24 rounded-full overflow-hidden border-2 border-primary-100 dark:border-primary-900 flex items-center justify-center bg-gray-100 dark:bg-gray-800 cursor-pointer">
              {profilePhotoUrl ? (
                <img 
                  src={profilePhotoUrl} 
                  alt={`${displayName || user?.email}'s profile photo`} 
                  class="w-full h-full object-cover"
                  id="profile-image"
                />
              ) : (
                <div class="w-full h-full bg-primary-500 flex items-center justify-center text-white text-3xl">
                  {displayName ? displayName.charAt(0).toUpperCase() : user?.email?.charAt(0).toUpperCase()}
                </div>
              )}
              <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 flex items-center justify-center transition-opacity">
                <Icon name="mdi:camera" class="w-8 h-8 text-white" />
              </div>
            </div>
            <input 
              type="file" 
              id="profile-photo-input" 
              name="profile_photo"
              accept="image/*"
              class="hidden" 
            />
          </div>
          <p class="text-sm text-gray-500 dark:text-gray-400">Click to change photo</p>
          <p class="text-xs text-gray-400 dark:text-gray-500">Max size: 2MB</p>
        </div>

        <!-- Profile Form -->
        <div class="flex-1">
          <h2 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Personal Information</h2>
          
          <Form id="profile-form" method="post" classes="space-y-4">
            <input type="hidden" id="avatar_url" name="avatar_url" value={profilePhotoUrl || ''} />
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <FormField>
                  <InputField
                    type="text"
                    id="display_name"
                    label="Display Name"
                    value={user?.user_metadata?.display_name || displayName || ''}
                    required
                  />
                </FormField>
              </div>
              
              <div>
                <FormField>
                  <InputField
                    type="email"
                    id="email"
                    label="Email"
                    value={user?.email || ''}
                    disabled
                  />
                </FormField>
              </div>
            </div>
            
            <div class="pt-3">
              <Button style="primary" type="submit">
                <Icon name="mdi:content-save" class="w-4 h-4 mr-2" />
                Save Changes
              </Button>
            </div>
          </Form>
        </div>
      </div>
    </div>
    
    <!-- Account Settings -->
    <div class="bg-gray-50 dark:bg-gray-700/50 p-5 rounded-xl border border-gray-200 dark:border-gray-700">
      <h2 class="text-lg font-medium text-gray-900 dark:text-white mb-3">Account Settings</h2>
      
      <div class="space-y-3">
        <div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <div>
            <h3 class="font-medium text-gray-900 dark:text-white">Change Password</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Update your password for security</p>
          </div>
          <Button style="secondary" size="sm" id="change-password-btn">
            <Icon name="mdi:lock" class="w-4 h-4 mr-2" />
            Change
          </Button>
        </div>
        
        <div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <div>
            <h3 class="font-medium text-gray-900 dark:text-white">Email Notifications</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Manage your email preferences</p>
          </div>
          <Button style="secondary" size="sm" id="email-preferences-btn">
            <Icon name="mdi:email" class="w-4 h-4 mr-2" />
            Manage
          </Button>
        </div>
        
        <div class="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
          <div>
            <h3 class="font-medium text-red-600 dark:text-red-400">Delete Account</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Permanently delete your account and data</p>
          </div>
          <Button style="neutral" size="sm" id="delete-account-btn">
            <Icon name="mdi:delete" class="w-4 h-4 mr-2" />
            Delete
          </Button>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast for notifications -->
  <Toast id="profile-toast" />
</DashboardLayout>

<script>
  // Initialize DOM elements
  const profilePhotoContainer = document.getElementById('profile-photo-container');
  const profilePhotoInput = document.getElementById('profile-photo-input') as HTMLInputElement;
  const avatarUrlInput = document.getElementById('avatar_url') as HTMLInputElement;
  const profileImage = document.getElementById('profile-image') as HTMLImageElement;
  const profileForm = document.getElementById('profile-form') as HTMLFormElement;
  
  // Add click event to the profile photo container
  if (profilePhotoContainer) {
    profilePhotoContainer.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      profilePhotoInput?.click();
    });
  }
  
  // Handle file selection
  if (profilePhotoInput) {
    profilePhotoInput.addEventListener('change', async function(e) {
      const fileInput = e.target as HTMLInputElement;
      const file = fileInput.files?.[0];
      
      if (!file) return;
      
      // Validate file type
      if (!file.type.startsWith('image/')) {
        window.showToast?.({
          type: 'error',
          title: 'Invalid File',
          message: 'Please select an image file',
          duration: 5000
        });
        return;
      }
      
      // Validate file size (max 2MB)
      if (file.size > 2 * 1024 * 1024) {
        window.showToast?.({
          type: 'error',
          title: 'File Too Large',
          message: 'Please select an image smaller than 2MB',
          duration: 5000
        });
        return;
      }
      
      try {
        // Show loading toast
        window.showToast?.({
          type: 'info',
          title: 'Uploading',
          message: 'Uploading your profile photo...',
          duration: 0
        });
        
        // Create form data for upload
        const formData = new FormData();
        formData.append('file', file);
        formData.append('type', 'avatar');
        
        // Upload the file
        const response = await fetch('/api/upload', {
          method: 'POST',
          body: formData
        });
        
        if (!response.ok) {
          throw new Error('Upload failed');
        }
        
        const result = await response.json();
        
        // Update the profile image preview
        if (profileImage && result.url) {
          profileImage.src = result.url;
        } else if (profilePhotoContainer && result.url) {
          const div = profilePhotoContainer.querySelector('div');
          if (div) {
            div.innerHTML = `<img src="${result.url}" alt="Profile photo" class="w-full h-full object-cover" id="profile-image" />`;
          }
        }
        
        // Update the hidden input
        if (avatarUrlInput) {
          avatarUrlInput.value = result.url;
        }
        
        // Submit the form to update the profile
        profileForm?.submit();
        
        // Show success toast
        window.showToast?.({
          type: 'success',
          title: 'Success',
          message: 'Profile photo updated successfully',
          duration: 5000
        });
        
      } catch (error) {
        console.error('Upload error:', error);
        window.showToast?.({
          type: 'error',
          title: 'Upload Failed',
          message: 'Failed to upload profile photo. Please try again.',
          duration: 5000
        });
      }
    });
  }
  
  // Handle form submission
  if (profileForm) {
    profileForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const formData = new FormData(profileForm);
      fetch('/api/profile/update', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.showToast?.({
            type: 'success',
            title: 'Success',
            message: 'Profile updated successfully',
            duration: 5000
          });
        } else {
          throw new Error(data.message || 'Failed to update profile');
        }
      })
      .catch(error => {
        console.error('Profile update error:', error);
        window.showToast?.({
          type: 'error',
          title: 'Update Failed',
          message: 'Failed to update profile. Please try again.',
          duration: 5000
        });
      });
    });
  }
</script>

<style>
  .profile-button {
    transition: background-color 0.2s ease;
  }
  .profile-button:hover {
    background-color: rgba(219, 39, 119, 0.9); /* primary-500 with slight transparency */
    color: white !important; /* Force white text */
  }
</style> 
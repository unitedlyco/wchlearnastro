---
// Substack Post Page
// ------------
// Description: The individual Substack post page.

// Components
// - Layout
import Layout from '../../layouts/PostLayout.astro'

// Substack RSS Client
import substackClient from '../../lib/substack.js'

// Types
interface SubstackPost {
    title: string;
    link: string;
    pubDate: string | Date;
    content: string;
    contentSnippet?: string;
    guid?: string;
    isoDate?: string;
    featuredImage?: string;
    author?: string;
    description?: string;
}

interface Props {
    post?: SubstackPost;
    title?: string;
    description?: string;
    image?: string;
}

// Enable prerendering for static builds
export const prerender = true;

// Get all posts for static paths
export async function getStaticPaths() {
    try {
        const posts = await substackClient.getAllPosts();

        return posts.map((post: SubstackPost) => {
            // Extract post ID from URL
            const url = new URL(post.link);
            const id = url.pathname.split('/').pop() || 'not-found';

            // Extract image from content if not provided
            const image = post.featuredImage || extractImageFromContent(post.content) || '/placeholder-image.jpg';

            return {
                params: { id },
                props: { 
                    post,
                    title: post.title || 'Post Not Available',
                    description: post.description || post.contentSnippet || 'We apologize, but this post could not be loaded at this time.',
                    image
                }
            };
        });
    } catch (error) {
        console.error('Error fetching Substack posts for static paths:', error);
        return [];
    }
}

// Helper function to extract image from content
function extractImageFromContent(content: string = ''): string | null {
    const imgMatch = content.match(/<img[^>]+src="([^"]+)"/);
    return imgMatch?.[1] || null;
}

// Get post from props with fallback values
const { post, title: fallbackTitle, description: fallbackDescription, image: fallbackImage } = Astro.props as Props;

// Format the data with fallbacks
const frontmatter = {
    id: post?.guid || 'not-found',
    title: post?.title || fallbackTitle || 'Post Not Available',
    description: post?.description || post?.contentSnippet || fallbackDescription || 'We apologize, but this post could not be loaded at this time.',
    pubDate: new Date(post?.pubDate || Date.now()),
    image: post?.featuredImage || fallbackImage || '/placeholder-image.jpg',
    author: post?.author || 'WCH Team',
    tags: ['Substack'],
    originalLink: post?.link
};

// The post content with fallback
const content = post?.content || '<p>We apologize, but the content of this post could not be loaded at this time. Please try again later.</p>';
---

<Layout frontmatter={frontmatter}>
    <div class="prose dark:prose-invert mx-auto" set:html={content} />
</Layout>

<style>
    /* Ensure proper spacing in prose content */
    :global(.prose) {
        max-width: 65ch;
        margin-left: auto;
        margin-right: auto;
    }
    
    :global(.prose img) {
        border-radius: 0.5rem;
        margin: 2rem auto;
        max-width: 100%;
        height: auto;
    }
    
    :global(.prose a) {
        color: var(--color-primary-600);
        text-decoration: none;
    }
    
    :global(.prose a:hover) {
        text-decoration: underline;
    }

    /* Additional Substack-specific styles */
    :global(.prose iframe) {
        max-width: 100%;
        margin: 2rem auto;
    }

    :global(.prose blockquote) {
        border-left: 4px solid var(--color-primary-600);
        margin-left: 0;
        padding-left: 1rem;
        font-style: italic;
    }
</style> 
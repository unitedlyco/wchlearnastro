---
// Substack Pagination Page
// ------------
// Description: The Substack pagination page.

// Components
import Layout from '../../layouts/Layout.astro';
import Hero from '../../components/blocks/hero/PageHeader.astro';
import BlogPosts from '../../components/blocks/blog/BlogPosts.astro';
import Pagination from '../../components/ui/Pagination.astro';

// Substack RSS Client
import substackClient from '../../lib/substack.js';

// Types
interface SubstackPost {
	title: string;
	link: string;
	pubDate: string;
	content: string;
	contentSnippet?: string;
	guid?: string;
	isoDate?: string;
	featuredImage?: string;
	author?: string;
	description?: string;
}

interface PaginationData {
	totalPages: number;
	currentPage: number;
	hasNextPage: boolean;
	hasPrevPage: boolean;
}

interface PageProps {
	pageNum: number;
	posts: SubstackPost[];
	totalPages: number;
}

// Content
const SEO = {
	title: 'WCH Learn | Latest Substack Articles from World Council for Health',
	description: "Explore the latest Substack articles from World Council for Health. Stay informed and stay healthy with WCH Learn."
};

const header = {
	title: 'The <strong>WCH</strong> Substack. Latest Articles and Updates',
	text: 'Stay informed with the latest Substack articles from World Council for Health.'
};

// Enable prerendering for static builds
export const prerender = true;

// Get static paths for all pages except page 1 (handled by index.astro)
export async function getStaticPaths() {
	try {
		const posts = await substackClient.getAllPosts();
		const totalPages = Math.ceil(posts.length / 12); // 12 posts per page
		
		// Generate paths for pages 2 onwards
		return Array.from({ length: totalPages - 1 }, (_, i) => {
			const pageNum = i + 2; // Start from page 2
			return {
				params: { page: pageNum.toString() },
				props: { 
					pageNum,
					posts: posts.slice((pageNum - 1) * 12, pageNum * 12),
					totalPages
				}
			};
		});
	} catch (error) {
		console.error('Error generating static paths:', error);
		return [];
	}
}

// Get page number and posts from props (type-safe)
const { page } = Astro.params;
const { pageNum, posts, totalPages } = Astro.props as PageProps;
const currentPage = parseInt(page || '1');

// Transform posts to match blog format
const transformedPosts = posts.map((post: SubstackPost) => ({
	title: post.title || 'Untitled Post',
	description: post.description || '',
	pubDate: new Date(post.pubDate),
	image: post.featuredImage || '/placeholder-image.jpg',
	author: post.author || 'WCH Team',
	link: post.link,
	tags: []
}));

// Generate pagination URLs
const prevUrl = currentPage === 2 ? '/substack' : `/substack/${currentPage - 1}`;
const nextUrl = currentPage < totalPages ? `/substack/${currentPage + 1}` : undefined;
---

<Layout title={SEO.title} description={SEO.description}>
	<Hero title={header.title} text={header.text} />
	
	<BlogPosts posts={transformedPosts} source="substack" />
	
	<Pagination 
		currentPage={currentPage} 
		totalPages={totalPages} 
		prevUrl={prevUrl} 
		nextUrl={nextUrl} 
	/>
</Layout> 
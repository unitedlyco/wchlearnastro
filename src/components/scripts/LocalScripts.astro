<!-- Scripts for UI components -->
<script async defer>
	document.addEventListener('astro:page-load', () => {
		// Menu Dropdown
		const menuItems = document.querySelectorAll('.header__menu-item')
		menuItems.forEach((menuItem) => {
			const submenu = menuItem.querySelector('.header__submenu')
			const link = menuItem.querySelector('.header__menu-link')

			if (submenu && link) {
				link.addEventListener('click', function (event) {
					event.preventDefault()
					menuItem.classList.toggle('open')
				})
			}
		})
		document.addEventListener('click', function (event) {
			const target = event.target

			menuItems.forEach((menuItem) => {
				const submenu = menuItem.querySelector('.header__submenu')
				if (submenu && !menuItem.contains(target)) {
					menuItem.classList.remove('open')
				}
			})
		})

		// Menu toggle
		const headerToggle = document.querySelector('.header__toggle')
		const headerMenu = document.querySelector('.header__menu')
		if (headerToggle && headerMenu) {
			headerToggle.addEventListener('click', () => {
				headerToggle.classList.toggle('header__toggle--open')
				const isExpanded = headerToggle.getAttribute('aria-expanded') === 'true'
				const newExpandedValue = isExpanded ? 'false' : 'true'
				headerToggle.setAttribute('aria-expanded', newExpandedValue)
				headerMenu.classList.toggle('header__menu--open')
			})
		}

		// Modals
		function openModal(modal) {
			if (modal && modal.classList.contains('modal')) {
				modal.classList.add('open')
			}
		}
		function closeModal(modal) {
			if (modal && modal.classList.contains('modal')) {
				modal.classList.remove('open')
			}
		}
		const modalButtons = document.querySelectorAll('[data-modal]')

		modalButtons.forEach(function (button) {
			button.addEventListener('click', function () {
				const modalId = button.getAttribute('data-modal')
				const modal = document.getElementById(modalId)
				openModal(modal)
			})
		})
		document.querySelectorAll('.modal').forEach(function (modal) {
			modal.addEventListener('click', function (event) {
				if (event.target === modal) {
					closeModal(modal)
				}
			})
			const close = modal.querySelector('.modal__close')
			close.addEventListener('click', function (event) {
				event.stopPropagation()
				closeModal(modal)
			})
		})
	})
</script>

<!-- Scroll animations -->
<script>
	const initializeObserver = () => {
		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					entry.target.classList.add('scroll-animated')
				}
			})
		})

		const elements = document.querySelectorAll('.scroll-animation .col')

		elements.forEach((element) => {
			observer.observe(element)
		})
	}

	document.addEventListener('DOMContentLoaded', () => {
		initializeObserver()
	})

	document.addEventListener('astro:page-loaded', () => {
		initializeObserver()
	})

	document.addEventListener('astro:after-swap', () => {
		initializeObserver()
	})
</script>

<!-- Light/Dark mode  -->
<script>
	const applyTheme = () => {
		// Always use light mode
		document.documentElement.classList.remove('dark')
		localStorage.theme = 'light'
	}

	const setupThemeSwitcher = () => {
		const themeSwitcher = document.getElementById('theme-selector')
		if (themeSwitcher) {
			// Remove the theme switcher since we're enforcing light mode
			themeSwitcher.style.display = 'none'
		}
	}

	// Initialize theme
	document.addEventListener('DOMContentLoaded', () => {
		applyTheme()
		setupThemeSwitcher()
	})

	// Handle theme changes during navigation
	document.addEventListener('astro:page-loaded', () => {
		applyTheme()
		setupThemeSwitcher()
	})

	document.addEventListener('astro:after-swap', () => {
		applyTheme()
		setupThemeSwitcher()
	})
</script>

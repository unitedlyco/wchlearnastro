---
// Header - Navigation bar
// ------------
// Description: navigation bars offer a persistent and convenient way to switch between primary destinations in an app.
// Structure:
// - Logo: the logo of the website
// - Menu toggle: the mobile menu toggle of the navigation bar
// - Navigation Links: the navigation links of the menu
// - Actions: action buttons for the navigation bar
// - Theme Switcher: the mode (light/dark) switcher of the website

// Reference: https://wind-ui.com/components/navbars/

// Components
// - UI
import { Icon } from 'astro-icon/components'
import Button from './Button.astro'

// Data
import { navigationBarData } from '../../config/navigationBar'
const { logo, navItems, navActions } = navigationBarData

// Determine current path
const path = new URL(Astro.request.url).pathname
function isActivePath(currentPath: string): boolean {
	return path === currentPath || path === `${currentPath}/`
}

// Check if user is logged in
const { session } = Astro.locals;
const isLoggedIn = !!session?.access_token;

// Type assertion for navActions to ensure type safety
const savedNavActions = navActions.map((action) => {
	// If logged in and action name is "Join Now!", change it to "Dashboard"
	if (isLoggedIn && action.name === "Join Now!") {
		return {
			...action,
			name: "Dashboard",
			link: "/dashboard",
			style: "secondary" as "primary" | "secondary" | "neutral",
			size: action.size as 'base' | 'lg' | 'sm'
		};
	}
	return {
		...action,
		size: action.size as 'base' | 'lg' | 'sm',
		style: action.style as 'primary' | 'secondary' | 'neutral'
	};
});

// Props
interface Props {
	activeMenuItem?: string;
}

const { activeMenuItem } = Astro.props;
---

<header class="header fixed w-full top-0 left-0 z-50 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
	<div class="container mx-auto px-4">
		<div class="flex items-center justify-between h-16">
			<!-- Logo -->
			<a href="/" class="header__logo">
				<img 
					class="desktop-logo hidden lg:block" 
					src="/Learn-logo-Wide.svg" 
					alt="Learn" 
					width="187"
					height="45"
				/>
				<img 
					class="mobile-logo block lg:hidden" 
					src="/Learn-logo-Pink.svg" 
					alt="Learn" 
					width="157" 
					height="37" 
				/>
			</a>

			<!-- Desktop Navigation -->
			<nav class="hidden md:flex items-center justify-center flex-1 gap-8">
				<a 
					href="/courses" 
					class:list={[
						"text-base font-medium hover:text-primary-600 transition-colors",
						{
							"text-primary-600": activeMenuItem === "courses",
							"text-gray-600 dark:text-gray-300": activeMenuItem !== "courses"
						}
					]}
				>
					Courses
				</a>
				<a 
					href="/blog" 
					class:list={[
						"text-base font-medium hover:text-primary-600 transition-colors",
						{
							"text-primary-600": activeMenuItem === "blog",
							"text-gray-600 dark:text-gray-300": activeMenuItem !== "blog"
						}
					]}
				>
					Blog
				</a>
				<a 
					href="/substack" 
					class:list={[
						"text-base font-medium hover:text-primary-600 transition-colors",
						{
							"text-primary-600": activeMenuItem === "substack",
							"text-gray-600 dark:text-gray-300": activeMenuItem !== "substack"
						}
					]}
				>
					Substack
				</a>
				{/* Pricing menu item temporarily hidden
				<a 
					href="/pricing" 
					class:list={[
						"text-base font-medium hover:text-primary-600 transition-colors",
						{
							"text-primary-600": activeMenuItem === "pricing",
							"text-gray-600 dark:text-gray-300": activeMenuItem !== "pricing"
						}
					]}
				>
					Pricing
				</a>
				*/}
			</nav>

			<!-- Desktop Actions -->
			<div class="hidden md:flex items-center gap-4">
				{!isLoggedIn ? (
					<>
						<a 
							href="/signin" 
							class="inline-flex items-center justify-center px-6 py-2.5 text-base font-medium text-gray-700 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white transition-colors"
							id="nav-signin-btn"
						>
							Sign In
						</a>
						<a 
							href="/signup" 
							class="inline-flex items-center justify-center px-6 py-2.5 text-base font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-lg transition-colors"
							id="nav-action-btn"
						>
							Join Now!
						</a>
					</>
				) : (
					<a 
						href="/dashboard" 
						class="inline-flex items-center justify-center px-6 py-2.5 text-base font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-lg transition-colors"
						id="nav-dashboard-btn"
					>
						Dashboard
					</a>
				)}
			</div>

			<!-- Mobile Menu Button -->
			<button
				type="button"
				class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500"
				aria-controls="mobile-menu"
				aria-expanded="false"
				id="mobile-menu-button"
			>
				<span class="sr-only">Open main menu</span>
				<Icon name="mdi:menu" class="block h-6 w-6" id="menu-open-icon" />
				<Icon name="mdi:close" class="hidden h-6 w-6" id="menu-close-icon" />
			</button>
		</div>

		<!-- Mobile Menu -->
		<div class="md:hidden hidden" id="mobile-menu">
			<div class="px-2 pt-2 pb-3 space-y-1">
				<a
					href="/courses"
					class:list={[
						"block px-3 py-2 rounded-md text-base font-medium",
						{
							"text-primary-600 bg-primary-50 dark:bg-primary-900/50": activeMenuItem === "courses",
							"text-gray-600 hover:text-gray-900 hover:bg-gray-50 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800": activeMenuItem !== "courses"
						}
					]}
				>
					Courses
				</a>
				<a
					href="/blog"
					class:list={[
						"block px-3 py-2 rounded-md text-base font-medium",
						{
							"text-primary-600 bg-primary-50 dark:bg-primary-900/50": activeMenuItem === "blog",
							"text-gray-600 hover:text-gray-900 hover:bg-gray-50 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800": activeMenuItem !== "blog"
						}
					]}
				>
					Blog
				</a>
				<a
					href="/substack"
					class:list={[
						"block px-3 py-2 rounded-md text-base font-medium",
						{
							"text-primary-600 bg-primary-50 dark:bg-primary-900/50": activeMenuItem === "substack",
							"text-gray-600 hover:text-gray-900 hover:bg-gray-50 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800": activeMenuItem !== "substack"
						}
					]}
				>
					Substack
				</a>
				{/* Pricing menu item temporarily hidden
				<a
					href="/pricing"
					class:list={[
						"block px-3 py-2 rounded-md text-base font-medium",
						{
							"text-primary-600 bg-primary-50 dark:bg-primary-900/50": activeMenuItem === "pricing",
							"text-gray-600 hover:text-gray-900 hover:bg-gray-50 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800": activeMenuItem !== "pricing"
						}
					]}
				>
					Pricing
				</a>
				*/}
			</div>
			<div class="pt-4 pb-3 border-t border-gray-200 dark:border-gray-800">
				<div class="px-2 space-y-1">
					<div class="flex items-center justify-between px-3 py-2">
						<span class="text-sm font-medium text-gray-600 dark:text-gray-300">Theme</span>
					</div>
					{!isLoggedIn ? (
						<>
							<a
								href="/signin"
								class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-50 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800"
							>
								Sign In
							</a>
							<a
								href="/signup"
								class="block px-3 py-2 rounded-md text-base font-medium text-white bg-primary-600 hover:bg-primary-700 dark:hover:bg-primary-500"
							>
								Join Now!
							</a>
						</>
					) : (
						<a
							href="/dashboard"
							class="block px-3 py-2 rounded-md text-base font-medium text-white bg-primary-600 hover:bg-primary-700 dark:hover:bg-primary-500"
						>
							Dashboard
						</a>
					)}
				</div>
			</div>
		</div>
	</div>
</header>

<!-- Spacer to prevent content from being hidden under fixed header -->
<div class="h-16"></div>

<style>
	.header {
		backdrop-filter: blur(8px);
		-webkit-backdrop-filter: blur(8px);
		background-color: rgba(255, 255, 255, 0.9);
	}

	.dark .header {
		background-color: rgba(31, 41, 55, 0.95);
	}

	.header__logo {
		@apply flex flex-auto items-center gap-2 whitespace-nowrap py-3 focus:outline-none;
	}

	@media (max-width: 768px) {
		#mobile-menu {
			max-height: calc(100vh - 4rem);
			overflow-y: auto;
		}
	}
</style>

<script>
	// Function to update navigation buttons based on authentication state
	function updateNavButtons() {
		// Check if user is logged in by looking for tokens
		const hasAccessToken = document.cookie.includes('sb-access-token') || 
							  localStorage.getItem('sb-access-token');
		
		// Update all auth-related buttons
		document.querySelectorAll<HTMLElement>('.nav-auth-btn').forEach(button => {
			const isActionButton = button.id === 'nav-action-btn';
			
			if (hasAccessToken) {
				if (isActionButton) {
					button.textContent = 'Dashboard';
					button.setAttribute('href', '/dashboard');
					button.className = button.className.replace(/button--primary/g, 'button--secondary');
				} else {
					button.style.display = 'none'; // Hide sign in button when logged in
				}
			} else {
				if (isActionButton) {
					button.textContent = 'Join Now!';
					button.setAttribute('href', '/signup');
					button.className = button.className.replace(/button--secondary/g, 'button--primary');
				} else {
					button.style.display = 'inline-flex'; // Show sign in button when logged out
				}
			}
		});
	}

	// Function to handle mobile menu toggle
	function setupMobileMenu() {
		const button = document.getElementById('mobile-menu-button');
		const menu = document.getElementById('mobile-menu');
		const openIcon = document.getElementById('menu-open-icon');
		const closeIcon = document.getElementById('menu-close-icon');
		
		if (!button || !menu || !openIcon || !closeIcon) return;
		
		let isOpen = false;
		
		function toggleMenu() {
			isOpen = !isOpen;
			menu.classList.toggle('hidden');
			openIcon.classList.toggle('hidden');
			closeIcon.classList.toggle('hidden');
			button.setAttribute('aria-expanded', isOpen.toString());
		}
		
		// Toggle menu on button click
		button.addEventListener('click', toggleMenu);
		
		// Close menu when clicking outside
		document.addEventListener('click', (event) => {
			const target = event.target as HTMLElement;
			if (isOpen && !menu.contains(target) && !button.contains(target)) {
				toggleMenu();
			}
		});
		
		// Close menu on escape key
		document.addEventListener('keydown', (event) => {
			if (event.key === 'Escape' && isOpen) {
				toggleMenu();
			}
		});
	}

	// Initialize navigation functionality
	function initNavigation() {
		updateNavButtons();
		setupMobileMenu();
	}

	// Run on initial load
	document.addEventListener('DOMContentLoaded', initNavigation);
	
	// Run on view transitions
	document.addEventListener('astro:after-swap', initNavigation);
	
	// Listen for auth state changes
	window.addEventListener('auth-state-change', updateNavButtons);
</script>

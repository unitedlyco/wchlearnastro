---
// Toast Component
// --------------
// A toast notification component that appears at the bottom of the screen

interface Props {
  id?: string;
}

const { id = 'toast-container' } = Astro.props;
---

<div id={id} class="fixed bottom-4 right-4 z-50 flex flex-col gap-2 transition-all duration-300 ease-in-out">
  <!-- Toast notifications will be inserted here dynamically -->
</div>

<script>
  // Toast types
  type ToastType = 'success' | 'error' | 'info' | 'warning';
  
  // Toast options
  interface ToastOptions {
    message: string;
    type?: ToastType;
    duration?: number;
    title?: string;
  }

  // Declare the global interface at the top
  declare global {
    interface Window {
      showToast: (options: ToastOptions) => void;
    }
  }
  
  // Create a global toast function
  window.showToast = function(options: ToastOptions) {
    const { 
      message, 
      type = 'info', 
      duration = 5000, 
      title = type.charAt(0).toUpperCase() + type.slice(1)
    } = options;
    
    // Get the toast container
    const container = document.getElementById('toast-container');
    if (!container) return;
    
    // Create toast element
    const toast = document.createElement('div');
    toast.className = `max-w-md w-full bg-white dark:bg-neutral-800 shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5 transition-all duration-300 ease-in-out opacity-0 transform translate-y-2`;
    
    // Add color based on type
    switch (type) {
      case 'success':
        toast.classList.add('ring-green-500');
        break;
      case 'error':
        toast.classList.add('ring-red-500');
        break;
      case 'warning':
        toast.classList.add('ring-yellow-500');
        break;
      case 'info':
      default:
        toast.classList.add('ring-primary-500');
        break;
    }
    
    // Create toast content
    toast.innerHTML = `
      <div class="flex-1 p-4">
        <div class="flex items-start">
          <div class="flex-shrink-0">
            ${getIconForType(type)}
          </div>
          <div class="ml-3 flex-1">
            <p class="text-sm font-medium text-neutral-900 dark:text-white">${title}</p>
            <p class="mt-1 text-sm text-neutral-500 dark:text-neutral-400">${message}</p>
          </div>
        </div>
      </div>
      <div class="flex border-l border-neutral-200 dark:border-neutral-700">
        <button type="button" class="flex w-full items-center justify-center rounded-none rounded-r-lg border border-transparent p-4 text-sm font-medium text-primary-600 hover:text-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-500">
          Close
        </button>
      </div>
    `;
    
    // Add toast to container
    container.appendChild(toast);
    
    // Animate in
    setTimeout(() => {
      toast.classList.remove('opacity-0', 'translate-y-2');
      toast.classList.add('opacity-100', 'translate-y-0');
    }, 10);
    
    // Add close button event listener
    const closeButton = toast.querySelector('button');
    if (closeButton) {
      closeButton.addEventListener('click', () => {
        removeToast(toast);
      });
    }
    
    // Auto remove after duration
    if (duration > 0) {
      setTimeout(() => {
        removeToast(toast);
      }, duration);
    }
  };
  
  // Helper function to remove toast with animation
  function removeToast(toast: HTMLElement) {
    toast.classList.remove('opacity-100', 'translate-y-0');
    toast.classList.add('opacity-0', 'translate-y-2');
    
    setTimeout(() => {
      toast.remove();
    }, 300);
  }
  
  // Helper function to get icon based on toast type
  function getIconForType(type: ToastType): string {
    switch (type) {
      case 'success':
        return `<svg class="h-6 w-6 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>`;
      case 'error':
        return `<svg class="h-6 w-6 text-red-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
        </svg>`;
      case 'warning':
        return `<svg class="h-6 w-6 text-yellow-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z" />
        </svg>`;
      case 'info':
      default:
        return `<svg class="h-6 w-6 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" />
        </svg>`;
    }
  }
</script> 
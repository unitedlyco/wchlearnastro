---
// Blog Posts grid Section
// ------------
// Description: A grid of blog posts sorted by date in a 3 column layout.

// Types
interface SubstackPost {
	title: string;
	link: string;
	pubDate: Date;
	author?: string;
	image?: string;
	tags?: string[];
	data?: {
		title?: string;
		link?: string;
		pubDate?: Date;
		author?: string;
		image?: string;
		tags?: string[];
	};
}

interface WordPressPost {
	id: string;
	data: {
		title: string;
		pubDate: Date;
		author: string;
		image: string;
		tags: string[];
	};
}

interface Props {
	data?: WordPressPost[];
	posts?: SubstackPost[];
	isLoading?: boolean;
	source?: 'blog' | 'substack';
	basePath?: string;
}

// Components
import Section from '../../../components/ui/Section.astro'
import Row from '../../../components/ui/Row.astro'
import Col from '../../../components/ui/Col.astro'
import Post from '../../../components/ui/cards/BlogCard.astro'
import TagNavigation from '../../../components/ui/blog/TagNavigation.astro'

// Props with defaults
const { 
	data, 
	posts, 
	isLoading = false, 
	source = "blog", 
	basePath = "/blog/" 
} = Astro.props as Props;

// Determine which data source to use
const postsToDisplay = posts || data || [];

// Helper function to safely get post ID from Substack URL
function getSubstackPostId(link: string = ''): string {
	try {
		const url = new URL(link);
		const pathParts = url.pathname.split('/');
		return pathParts[pathParts.length - 1] || '';
	} catch {
		return '';
	}
}

// Helper function to safely get post data
function getPostData(post: SubstackPost | WordPressPost, source: string) {
	if (source === "substack") {
		const substackPost = post as SubstackPost;
		return {
			id: getSubstackPostId(substackPost.link || substackPost.data?.link),
			title: substackPost.title || substackPost.data?.title || 'Untitled Post',
			author: substackPost.author || substackPost.data?.author || 'WCH Team',
			pubDate: new Date(substackPost.pubDate || substackPost.data?.pubDate || Date.now()),
			image: substackPost.image || substackPost.data?.image || '/og.jpg',
			tags: substackPost.tags || substackPost.data?.tags || []
		};
	} else {
		const wpPost = post as WordPressPost;
		return {
			id: wpPost.id,
			title: wpPost.data.title,
			author: wpPost.data.author,
			pubDate: new Date(wpPost.data.pubDate),
			image: wpPost.data.image,
			tags: wpPost.data.tags
		};
	}
}

// Process posts with proper error handling
const processedPosts = postsToDisplay.map(post => getPostData(post, source))
	.filter(post => post.id && post.title); // Filter out invalid posts

// Sort posts by date
const sortedPosts = processedPosts.sort((a, b) => b.pubDate.getTime() - a.pubDate.getTime());

// Set the correct base path based on source
const postBasePath = source === "substack" ? "/substack/" : basePath;
---

<Section>
	<div class="blog-posts-container">
		{source === "blog" && <TagNavigation />}
		
		{isLoading ? (
			<div class="loading-spinner">Loading posts...</div>
		) : (
			<div class="blog-posts-grid">
				{sortedPosts.map(post => (
					<div class="blog-post-item">
						<Post
							link={`${postBasePath}${post.id}`}
							title={post.title}
							subtitle={`By ${post.author} on ${post.pubDate.toLocaleDateString('en-US', { 
								year: 'numeric', 
								month: 'long', 
								day: 'numeric' 
							})}`}
							image={post.image}
							tags={post.tags}
							mobileSimplified={true}
						>
							<div class="flex items-start">
								<div class="inline-flex items-center px-4 py-2 text-sm font-medium text-[#fdfdfd] bg-[#002f56] rounded-lg hover:bg-[#e55d99] hover:text-[#fdfdfd] transition-all">
									Read More
									<svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
									</svg>
								</div>
							</div>
						</Post>
					</div>
				))}
			</div>
		)}
	</div>
</Section>

<style>
	.blog-posts-container {
		@apply w-full;
	}
	
	.blog-posts-grid {
		@apply grid grid-cols-3 gap-6;
	}
	
	.blog-post-item {
		@apply rounded-[10px] overflow-hidden transition-shadow duration-300 hover:shadow-[0_4px_20px_rgba(0,0,0,0.1)];
	}
	
	@media (max-width: 1024px) {
		.blog-posts-grid {
			@apply grid-cols-2 gap-4;
		}
	}
	
	@media (max-width: 768px) {
		.blog-posts-grid {
			@apply grid-cols-2 gap-4;
		}
	}
	
	@media (max-width: 480px) {
		.blog-posts-grid {
			@apply grid-cols-2 gap-3;
		}
	}
</style>

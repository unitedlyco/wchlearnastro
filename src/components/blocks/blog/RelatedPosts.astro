---
// Related Posts Component
// ------------
// Description: Displays related posts based on categories
// Properties:
// - categories: Array of category names to match
// - currentPostId: ID of the current post to exclude from results
// - limit: Maximum number of posts to display
// - source: Source of the posts (wordpress or substack)

// Components
import WordPressGraphQLClient from '../../../lib/wordpress.js';
import substackClient from '../../../lib/substack.js';

// Types
interface SubstackPost {
    title: any;
    link: any;
    pubDate: Date;
    description: any;
    content: any;
    featuredImage: string;
    author: any;
}

interface WordPressPost {
    slug: string;
    title: string;
    featuredImage?: {
        node?: {
            sourceUrl?: string;
        };
    };
}

interface RelatedPost {
    id: string;
    title: string;
    image: string;
    link: string;
}

interface Props {
    categories: string[];
    currentPostId: string;
    limit?: number;
    source?: 'wordpress' | 'substack';
}

// Props with defaults
const { 
    categories = [], 
    currentPostId, 
    limit = 4, 
    source = 'wordpress' 
} = Astro.props as Props;

// Helper function to safely get post ID from Substack URL
function getSubstackPostId(link: string = ''): string {
    try {
        const url = new URL(link);
        const pathParts = url.pathname.split('/');
        return pathParts[pathParts.length - 1] || '';
    } catch {
        return '';
    }
}

// Helper function to extract image from Substack content
function extractImageFromContent(content: string = ''): string {
    const imgMatch = content.match(/<img[^>]+src="([^"]+)"/);
    return imgMatch?.[1] || '/placeholder-image.jpg';
}

// Fetch related posts
let relatedPosts: RelatedPost[] = [];

if (source === 'substack') {
    try {
        const posts = await substackClient.getAllPosts();
        
        // Filter out the current post and limit the number of results
        relatedPosts = posts
            .filter((post: SubstackPost) => {
                const postId = getSubstackPostId(post.link);
                return postId && postId !== currentPostId;
            })
            .slice(0, limit)
            .map((post: SubstackPost) => {
                // Get image with fallbacks
                const image = post.featuredImage || 
                    (post.content ? extractImageFromContent(post.content) : '/placeholder-image.jpg');
                
                return {
                    id: getSubstackPostId(post.link),
                    title: post.title || 'Untitled Post',
                    image,
                    link: `/substack/${getSubstackPostId(post.link)}`
                };
            });
    } catch (error) {
        console.error('Error fetching related Substack posts:', error);
    }
} else if (categories.length > 0) {
    // Get the first category to query
    const categorySlug = categories[0].toLowerCase();
    const client = new WordPressGraphQLClient();
    
    try {
        const response = await client.getCategoryPosts(categorySlug, 8);
        
        if (response.category?.posts?.nodes) {
            // Filter out the current post and limit the number of results
            relatedPosts = response.category.posts.nodes
                .filter((post: WordPressPost) => post.slug !== currentPostId)
                .slice(0, limit)
                .map((post: WordPressPost) => ({
                    id: post.slug,
                    title: post.title || 'Untitled Post',
                    image: post.featuredImage?.node?.sourceUrl || '/placeholder-image.jpg',
                    link: `/blog/${post.slug}`
                }));
        }
    } catch (error) {
        console.error('Error fetching related WordPress posts:', error);
    }
}

// Filter out any invalid posts
relatedPosts = relatedPosts.filter(post => post.id && post.title);
---

<div class="related-posts">
    {relatedPosts.length > 0 ? (
        <>
            <h3 class="related-posts__heading">Related Articles</h3>
            <div class="related-posts__grid">
                {relatedPosts.map((post: RelatedPost) => (
                    <a href={post.link} class="related-post">
                        <div class="related-post__image-container">
                            <img 
                                src={post.image} 
                                alt={post.title} 
                                class="related-post__image" 
                                loading="lazy"
                                decoding="async"
                            />
                        </div>
                        <h4 class="related-post__title" set:html={post.title} />
                    </a>
                ))}
            </div>
        </>
    ) : (
        <p class="related-posts__empty">No related articles found.</p>
    )}
</div>

<style>
    .related-posts__heading {
        @apply text-xl font-bold mb-4 mt-8;
    }
    
    .related-posts__grid {
        @apply grid grid-cols-2 gap-4;
    }
    
    .related-post {
        @apply block no-underline hover:opacity-90 transition-opacity;
    }
    
    .related-post__image-container {
        @apply relative w-full pt-[75%] mb-2 rounded overflow-hidden;
    }
    
    .related-post__image {
        @apply absolute top-0 left-0 w-full h-full object-cover;
    }
    
    .related-post__title {
        @apply text-sm font-medium text-neutral-800 line-clamp-2;
    }
    
    .related-posts__empty {
        @apply text-neutral-500 italic text-sm;
    }
    
    @media (max-width: 480px) {
        .related-posts__grid {
            @apply grid-cols-2 gap-3;
        }
        
        .related-post__title {
            @apply text-xs;
        }
    }
</style> 